array=[1,2,3,4,5]
module Enumerable
  def my_each
    return self unless block_given?
    counter=0
    while(counter<self.size)
    yield(self[counter])
    counter+=1
    end
    self
  end
  def my_self_each_with_index
    return self unless block_given?
    counter=0
    while(counter<self.size)
      yield(self[counter],counter)
      counter+=1
    end
  end

  def my_select
    return self unless block_given?
    counter=0
    while(counter<self.size)
      if(yield(self[counter])==true)
        puts "#{self[counter]}"
      end
      counter+=1
    end
    self
  end
def my_all
  return self unless block_given?
  counter=0
  n=0
  while(counter<self.size)
    if(yield(self[counter])==true)
      n+=1
    end
    counter+=1
  end
  if (n==self.size)
    puts "true"
  else
    puts "false"
  end
  self
end

  def my_any
    return self unless block_given?
    counter=0
    n=0
    while(counter<self.size)
      if(yield(self[coounter])==true)
        n+=1
      end
      counter+=1
    end
    if(n>0)
      puts"true"
    else
      puts "false"
    end
  end

  def my_none
    return self unless block_given?
    counter=0
    n=0
    while(counter<self.size)
      if(yield(self[counter])==true)
        n+=1
      end
      counter+=1
    end
    if(n==0)
      puts"true"
    else
      puts "false"
    end
  end
def my_map
  return self unless block_given?
  counter=0
  while (counter<self.size)
    puts yield(self[counter])
  counter+=1
  end
  self
end
  def my_inject(x=0)
    return self unless block_given?
    counter=0
    a=[]
    a[counter]=yield(x,self[counter])
    while(counter<self.size-1)
      a[counter+1]=yield(a[counter],self[counter+1])
      counter+=1
    end
    puts a[counter]
    self
  end

end

